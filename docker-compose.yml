version: "3.7"

volumes:
  db-data:
  pnpm-store:

networks:
  aikoicu:
    driver: bridge
  proxy:
    external: true

services:
  aikoicu-db:
    image: postgres:15.2-alpine
    container_name: aikoicu-db
    restart: always
    environment:
      DOCKER_BUILDKIT: 1
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_HOST: $POSTGRES_HOST
      POSTGRES_PORT: $POSTGRES_PORT
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    user: root
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - aikoicu
    labels:
      - traefik.tcp.routers.aikoicu-db.entrypoints=postgres
      - traefik.tcp.routers.aikoicu-db.rule=HostSNI(`${CMS_SUBDOMAIN}${DOMAIN}`)
      - traefik.tcp.routers.aikoicu-db.tls=true
      - traefik.tcp.routers.aikoicu-db.tls.certresolver=letsencrypt_aikoicu
      - traefik.tcp.routers.aikoicu-db.service=aikoicu-db
      - traefik.tcp.services.aikoicu-db.loadbalancer.server.port=5432
      - traefik.docker.network=proxy

  aikoicu-redis:
    image: redis:7.2-rc1-alpine
    container_name: aikoicu-redis
    depends_on:
      - aikoicu-db
    restart: always
    ports:
      - 6379
    volumes:
      - db-data:/data
    networks:
      - aikoicu
    labels:
      - traefik.tcp.routers.aikoicu-redis.rule=HostSNI(`${CMS_SUBDOMAIN}${DOMAIN}`)
      - traefik.tcp.routers.aikoicu-redis.entryPoints=redis
      - traefik.tcp.routers.aikoicu-redis.service=redis
      - traefik.tcp.services.aikoicu-redis.loadbalancer.server.port=6379

  aikoicu-root:
    image: aikoicu-root
    container_name: aikoicu-root
    build:
      dockerfile: ./apps/root/Dockerfile
      context: .
      args:
        DOCKER_BUILDKIT: 1
      cache_from:
        - aikoicu-root
    networks:
      - proxy
      - aikoicu
    volumes:
      - pnpm-store:/root/.pnpm-store
    restart: unless-stopped

  aikoicu-proxy:
    image: aikoicu-proxy
    container_name: aikoicu-proxy
    build:
      dockerfile: Dockerfile
      context: ./apps/root/nginx
      args:
        DOCKER_BUILDKIT: 1
      cache_from:
        - aikoicu-proxy
    environment:
      - DOMAIN
      - SUBDOMAIN
    networks:
      - proxy
      - aikoicu
    depends_on:
      - aikoicu-root
    restart: always
    labels:
      - traefik.http.routers.registry.middlewares=traefik-compress
      - traefik.http.routers.aikoicu.rule=Host("${SUBDOMAIN}${DOMAIN}")
      - traefik.http.middlewares.aikoicu-redirect.redirectregex.regex=^(https?://)www.(.*)$$
      - traefik.http.middlewares.aikoicu-redirect.redirectregex.replacement=$${1}$${2}
      - traefik.http.routers.aikoicu.middlewares=aikoicu-redirect
      - traefik.http.routers.aikoicu.entrypoints=https
      - traefik.http.routers.aikoicu.tls=true
      - traefik.http.routers.aikoicu.tls.certresolver=${CERT_RESOLVER}
      - traefik.docker.network=proxy

  aikoicu-cms:
    image: aikoicu-cms
    container_name: aikoicu-cms
    build:
      dockerfile: ./apps/cms/Dockerfile
      context: .
      args:
        DOCKER_BUILDKIT: 1
      cache_from:
        - aikoicu-cms
    networks:
      - proxy
      - aikoicu
    volumes:
      - pnpm-store:/root/.pnpm-store
    restart: unless-stopped

  aikoicu-cms-proxy:
    image: aikoicu-cms-proxy
    container_name: aikoicu-cms-proxy
    build:
      dockerfile: Dockerfile
      context: ./apps/cms/nginx
      args:
        DOCKER_BUILDKIT: 1
      cache_from:
        - aikoicu-cms-proxy
    environment:
      - DOMAIN
      - CMS_SUBDOMAIN
    networks:
      - proxy
      - aikoicu
    depends_on:
      - aikoicu-cms
    restart: always
    labels:
      - traefik.http.routers.registry.middlewares=traefik-compress
      - traefik.http.routers.aikoicu-cms.rule=Host("${CMS_SUBDOMAIN}${DOMAIN}")
      - traefik.http.middlewares.aikoicu-cms-redirect.redirectregex.regex=^(https?://)www.(.*)$$
      - traefik.http.middlewares.aikoicu-cms-redirect.redirectregex.replacement=$${1}$${2}
      - traefik.http.routers.aikoicu-cms.middlewares=aikoicu-cms-redirect
      - traefik.http.routers.aikoicu-cms.entrypoints=https
      - traefik.http.routers.aikoicu-cms.tls=true
      - traefik.http.routers.aikoicu-cms.tls.certresolver=${CERT_RESOLVER}
      - traefik.docker.network=proxy
